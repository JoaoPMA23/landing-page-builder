// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String  @id @default(uuid())
  name      String
  plan      String  @default("free")
  createdAt DateTime @default(now())
  sites     Site[]
  users     UserAccount[]
  sessions  Session[]
  invites   AccountInvite[]
  magicLinks MagicLinkToken[]
  auditLogs AuditLog[]
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  name      String?
  createdAt DateTime @default(now())
  accounts  UserAccount[]
  sessions  Session[]
  oauth     OAuthAccount[]
  magicLinks MagicLinkToken[]
  auditLogs AuditLog[]
}

model UserAccount {
  userId    String
  accountId String
  role      Role   @default(owner)
  user      User     @relation(fields: [userId], references: [id])
  account   Account  @relation(fields: [accountId], references: [id])
  @@id([userId, accountId])
}

model Site {
  id           String  @id @default(uuid())
  accountId    String
  name         String
  subdomain    String  @unique
  customDomain String? @unique
  faviconUrl   String?
  ogImageUrl   String?
  isPublished  Boolean @default(false)
  pages        Page[]
  leads        Lead[]
  account      Account @relation(fields: [accountId], references: [id])
}

model Page {
  id        String  @id @default(uuid())
  siteId    String
  path      String
  title     String
  meta      Json?
  tree      Json
  status    String   @default("draft")
  updatedAt DateTime @updatedAt
  site      Site     @relation(fields: [siteId], references: [id])
  @@unique([siteId, path])
}

model Lead {
  id        String  @id @default(uuid())
  siteId    String
  pagePath  String
  data      Json
  source    String?
  createdAt DateTime @default(now())
  site      Site     @relation(fields: [siteId], references: [id])
}

model Session {
  id               String   @id @default(uuid())
  userId           String
  accountId        String
  refreshTokenHash String   @unique
  expiresAt        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
  account          Account  @relation(fields: [accountId], references: [id])
}

model OAuthAccount {
  id                 String   @id @default(uuid())
  userId             String
  provider           String
  providerAccountId  String
  accessToken        String?
  refreshToken       String?
  idToken            String?
  expiresAt          DateTime?
  createdAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model MagicLinkToken {
  id         String   @id @default(uuid())
  userId     String?
  email      String
  tokenHash  String   @unique
  accountId  String?
  role       Role?
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  consumedAt DateTime?
  user       User?    @relation(fields: [userId], references: [id])
  account    Account? @relation(fields: [accountId], references: [id])
}

model AccountInvite {
  id         String        @id @default(uuid())
  accountId  String
  email      String
  role       Role          @default(editor)
  tokenHash  String        @unique
  status     InviteStatus  @default(pending)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  acceptedAt DateTime?
  revokedAt  DateTime?
  account    Account  @relation(fields: [accountId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  accountId String?
  userId    String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  account   Account? @relation(fields: [accountId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

enum Role {
  owner
  admin
  editor
}

enum InviteStatus {
  pending
  accepted
  expired
  revoked
}
